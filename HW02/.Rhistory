head(data)
ls
sessionInfo()
data <- read.csv("flag.data")
data <- read.csv('flag.data')
data <- read.csv('flag.data')
data <- read.csv('flag.data')
data <- read.csv('flag.data')
data <- read.csv('flag.data')
setwd
?setwd
getwd()
setwd(dir =/home/aqeel/Study/Machine Learning/MachineLearningHW/HW01 )
setwd(dir ='/home/aqeel/Study/Machine Learning/MachineLearningHW/HW01 ')
setwd(dir ='/home/aqeel/Study/Machine\ Learning/MachineLearningHW/HW01 ')
pi
rm(list=ls())
setwd("/home/aqeel/Study/DM/HW02/")
mydata = read.csv('abalone.csv',header = TRUE)
names(mydata)
#######################################
#           Sixth Question            #
#######################################
lm.result<-lm(Diameter ~ Weight,mydata)
summary(lm.result)
anova(lm.result)
plot(mydata$Diameter,mydata$Weight)
print(lm.result)
print(lm.result[1])
print(lm.result[1][1])
length(lm.result)
length(lm.result[1])
length(lm.result[2])
length(lm.result[3])
lm.result[1]
lm.result[2]
lm.result[1][1]
lm.result[1,1]
lm.result[1][1]
lm.result[1][1,]
lm.result[1][2]
class(lm.result)
tt <-lm.result[1]
tt
tt[1]
tt$coefficients
tt$Weight
tt$coefficients$Weight
abline(lm.result)
lm.result<-lm(Diameter ~ Weight,mydata)
summary(lm.result)
anova(lm.result)
plot(lm.result)
lm.result<-lm(Diameter ~ Weight)
lm.result<-lm(Diameter ~ Weight,mydata)
abline(lm.result)
abline(lm.result[1])
plot(mydata$Diameter,mydata$Weight)
abline(lm.result[1])
abline(1,3)
abline(1,2)
abline(-1,1)
abline(0,4)
abline(0,5)
abline(-1,5)
plot(mydata$Diameter,mydata$Weight)
lines(lm.result, col ='red')
lm.result[2]
lm.result[2][1]
lm.result[2][1,1]
lm.result[2]$residuals
lm.result[2]$residuals[1]
lm.result[2]$residuals[2]
lm.result[2]$residuals[1:4]
lm.result[3]
weighted.mean()
weights()
weghts<- coef(lm.result)
weghts
linear.model
ypred <- weghts[1]+weghts[2]*mydata$Weight
ypred.lm <- predict(lm.result, newdata = mydata)
plot(data)
plot(mydata)
rm(list=ls())
setwd("/home/aqeel/Study/ML/Practice\ Session\ 02/session-materials")
load("exercise-1.Rdata")
# Lets observe the data
plot(data)
# Lets observe the linear model
linear.model
# Lets extract coeficiens of the linear model
coef(linear.model)
beta <- coef(linear.model)
# Use the linear model formula y = beta[1] + beta[2] * x  to predict values on data$x
ypred <- beta[1] + beta[2] * data$x
plot(data)
points(data$x, ypred, col = "red", lwd = 2)
ypred.lm <- predict(linear.model, newdata = data)
points(data$x, ypred.lm, pch = 18, col = "blue")
rm(list=ls())
setwd("/home/aqeel/Study/DM/HW02/")
mydata = read.csv('abalone.csv',header = TRUE)
names(mydata)
#######################################
#           Sixth Question            #
#######################################
lm(Diameter ~ Weight,mydata)
linear.model
rm(list=ls())
setwd("/home/aqeel/Study/DM/HW02/")
mydata = read.csv('abalone.csv',header = TRUE)
names(mydata)
plot(mydata$Weight,mydata$Diameter)
linear.model
linear.model<-lm(Weight ~Diameter,mydata)
variables<-coef(linear.model)
plot(mydata$Weight,mydata$Diameter)
linear.model<-lm(Weight ~Diameter,mydata)
variables<-coef(linear.model)
ypredict<-variables[1]+variables[2]*mydata$Diameter
rm(list=ypredict)
weightprediction <-variables[1]+variables[2]*mydata$Diameter
rm(ypredict)
weightprediction <-variables[1]+variables[2]*mydata$Diameter
?points
points(mydata$Diameter,weightprediction,col="red",lwd=2)
FitLM <- function(x, y)
{
X <- cbind(rep(1, length(x)), x)
A <- t(X) %*% X
b <- t(X) %*% y
beta <- solve(A, b)
return(beta)
}
r<-FitLM(mydata$Diameter,mydata$Weight)
View(r)
?abline
abline(r[1],r[2],col="red")
rm(list=ls())
setwd("/home/aqeel/Study/DM/HW02/")
mydata = read.csv('abalone.csv',header = TRUE)
names(mydata)
#######################################
#           Sixth Question            #
#######################################
plot(mydata$Weight,mydata$Diameter)
fitline<-function(X,Y)
{
# Get total number of points
n = length(X);
# Define relevant quantities for finding quantities
sumxi = sum(X);
sumyi = sum(Y);
sumxiyi = sum(X.*Y);
sumxi2 = sum(X.^2);
sumyi2 = sum(Y.^2);
# Determine slope and intercept
m = (sumxi * sumyi - n*sumxiyi) / (sumxi^2 - n*sumxi2);
b = (sumxiyi * sumxi - sumyi * sumxi2) / (sumxi^2 - n*sumxi2);
}
result <- fitline(mydata$Diameter,mydata$Weight)
result <- fitline(X = mydata$Diameter,Y = mydata$Weight)
fitline<-function(X,Y)
{
# Get total number of points
n = length(X);
# Define relevant quantities for finding quantities
#sumxi = sum(X);
#sumyi = sum(Y);
#sumxiyi = sum(X.*Y);
#sumxi2 = sum(X.^2);
#sumyi2 = sum(Y.^2);
# Determine slope and intercept
#m = (sumxi * sumyi - n*sumxiyi) / (sumxi^2 - n*sumxi2);
}
result <- fitline(X = mydata$Diameter,Y = mydata$Weight)
fitline<-function(X,Y)
{
# Get total number of points
n = length(X);
print (n)
}
result <- fitline(X = mydata$Diameter,Y = mydata$Weight)
fitline<-function(X,Y)
{
# Get total number of points
n = length(X);
# Define relevant quantities for finding quantities
sumxi = sum(X);
sumyi = sum(Y);
}
result <- fitline(X = mydata$Diameter,Y = mydata$Weight)
?lm.fit
plot(mydata$Weight,mydata$Diameter)
rslt<-lm.fit(mydata$Diameter,mydata$Weight)
rm(list=ls())
setwd("/home/aqeel/Study/ML/Practice\ Session\ 02/session-materials")
load("exercise-1.Rdata")
# Lets observe the data
plot(data)
# Lets observe the linear model
linear.model
# Lets extract coeficiens of the linear model
coef(linear.model)
beta <- coef(linear.model)
# Use the linear model formula y = beta[1] + beta[2] * x  to predict values on data$x
ypred <- beta[1] + beta[2] * data$x
plot(data)
points(data$x, ypred, col = "red", lwd = 2)
ypred.lm <- predict(linear.model, newdata = data)
points(data$x, ypred.lm, pch = 18, col = "blue")
# Does noty work
predict(linear.model, newdata = c(1:5))
predict(linear.model, newdata = data.frame(x=c(1:5)))
# Now do the same thing with matrix operations
# Form the design matrix X
n <- nrow(data)
X <- cbind(rep(1, n), data$x)
# Express predictions using matrix algebra
ypred.mat <- X %*% beta
# Check that the result is the same
t(ypred-ypred.mat)
# Compute mean of squares error using matrix algebra
n <- nrow(data)
mse <- 1/n * sum((data$y - ypred)^2)
# Try to get the same result using matrix operations and data$y and ypred
mse.simple <- 1/n * t(data$y-ypred) %*%(data$y-ypred)
# Try the full formula
mse.complex <- 1/n * t(data$y-X %*% beta) %*%(data$y-X %*% beta)
x <- data$x
y <- data$y
FitLM <- function(x, y)
{
X <- cbind(rep(1, length(x)), x)
A <- t(X) %*% X
b <- t(X) %*% y
beta <- solve(A, b)
return(beta)
}
FitLM(data$x, data$y)
coef(lm(y ~ x + 1, data = data))
# Error vector
eps <- rnorm(100, mean = 0, sd = 0.05)
rm(list=ls())
setwd("/home/aqeel/Study/DM/HW02/")
mydata = read.csv('abalone.csv',header = TRUE)
View(mydata)
View(mydata)
plot(data[,(3,5)])
plot(data[,c(3,5)])
plot(data[,3])
plot(data)
plot(data)
plot(mydata[,(3,5)])
plot(mydata[,c(3,5)])
# Lets observe the linear model
linear.model
load("/home/aqeel/Study/ML/Practice Session 02/session-materials/exercise-1.Rdata")
rm(list=ls())
#setwd("/home/aqeel/Study/ML/Practice\ Session\ 02/session-materials")
#load("exercise-1.Rdata")
setwd("/home/aqeel/Study/DM/HW02/")
mydata = read.csv('abalone.csv',header = TRUE)
# Lets observe the data
plot(mydata[,c(3,5)])
?lm
linear.model = ?(Weight ~ Diameter,mydata)
linear.model = lm(Weight ~ Diameter,mydata)
# Lets extract coeficiens of the linear model
coef(linear.model)
beta <- coef(linear.model)
ypred <- beta[1] + beta[2] * mydata$x
ypred <- beta[1] + beta[2] * mydata$Diameter
plot(mydata[,c(3,5)])
points(data$x, ypred, col = "red", lwd = 2)
points(mydata$Diameter, ypred, col = "red", lwd = 2)
abline(a = beta[1],b = beta[2],col="blue")
rm(list=ls())
#setwd("/home/aqeel/Study/ML/Practice\ Session\ 02/session-materials")
#load("exercise-1.Rdata")
setwd("/home/aqeel/Study/DM/HW02/")
rm(list=ls())
setwd("/home/aqeel/Study/DM/HW02/")
mydata = read.csv('abalone.csv',header = TRUE)
# Lets observe the data
plot(mydata[,c(3,5)])
# Lets observe the linear model
linear.model = lm(Weight ~ Diameter,mydata)
# Lets extract coeficiens of the linear model
coef(linear.model)
beta <- coef(linear.model)
# Use the linear model formula y = beta[1] + beta[2] * x  to predict values on data$x
ypred <- beta[1] + beta[2] * mydata$Diameter
plot(mydata[,c(3,5)])
abline(a = beta[1],b = beta[2],col="blue")
abline(a = beta[1],b = beta[2],col="red")
plot(mydata[,c(3,5)])
abline(a = beta[1],b = beta[2],col="red")
abline(a = beta[1],b = beta[2],col="red",lwd=3)
abline(a = beta[1],b = beta[2],col="red",lwd=5)
rm(list=ls())
setwd("/home/aqeel/Study/DM/HW02/")
mydata = read.csv('abalone.csv',header = TRUE)
# Lets observe the data
plot(mydata[,c(3,5)])
# Lets observe the linear model
linear.model = lm(Weight ~ Diameter,mydata)
# Lets extract coeficiens of the linear model
coef(linear.model)
variables <- coef(linear.model)
plot(mydata[,c(3,5)])
abline(a = variables[1],b = variables[2],col="red",lwd=5)
plot(linear.model)
rm(list=ls())
setwd("/home/aqeel/Study/DM/HW02/")
mydata = read.csv('abalone.csv',header = TRUE)
# Lets observe the data
plot(mydata[,c(3,5)])
# Lets observe the linear model
linear.model = lm(Weight ~ Diameter,mydata)
# Lets extract coeficiens of the linear model
coef(linear.model)
variables <- coef(linear.model)
plot(mydata[,c(3,5)])
abline(a = variables[1],b = variables[2],col="red",lwd=5)
par(c(2,2))
plot(linear.model)
rm(list=ls())
setwd("/home/aqeel/Study/DM/HW02/")
mydata = read.csv('abalone.csv',header = TRUE)
# Lets observe the data
#######################################
#           Sixth Question            #
#######################################
#USED MACHINE LEARNING EXERCISE SESSION CODE TO HELP WITH THIS TASK
rm(list=ls())
setwd("/home/aqeel/Study/DM/HW02/")
mydata = read.csv('abalone.csv',header = TRUE)
# Lets observe the data
plot(mydata[,c(3,5)])
# Lets observe the linear model
linear.model = lm(Weight ~ Diameter,mydata)
# Lets extract coeficiens of the linear model
variables <- coef(linear.model)
plot(mydata[,c(3,5)])
abline(a = variables[1],b = variables[2],col="red",lwd=5)
